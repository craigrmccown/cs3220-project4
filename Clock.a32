; Addresses for I/O
.NAME	HEX = 0xFFFFF000
.NAME	LEDR = 0xFFFFF020
.NAME	KEY = 0xFFFFF080
.NAME   KCTRL = 0xFFFFF084
.NAME	SW = 0xFFFFF090
.NAME   SCTRL = 0xFFFFF094
.NAME	TCNT = 0xFFFFF100
.NAME	TLIM = 0xFFFF0104
.NAME	TCTRL = 0xFFFF0108
.NAME   STACK = 0x8000
.NAME   TESTVAL = 0xBEEFED

.ORIG 0x100

; Set initial register values
;
; S0 is seconds
; S1 is minutes
; S2 is hours
; S3 is device addresses
; T0 is device values
Main:
XOR		Zero,Zero,Zero              ; Set Zero register to 0
LW      SP,StackAddr(Zero)          ; Initialize stack pointer
ADD     FP,SP,Zero                  ; Initialize frame pointer
ADDI    S0,Zero,0x50                ; Set seconds to 50
ADDI    S1,Zero,0x59                ; Set minutes to 59
ADDI    S2,Zero,0x23                ; Set hours to 23
LW      S3,TLimAddr(Zero)           ; Load timer limit address
ADDI	T0,Zero,1000                ; Set timer limit to 1000
SW		T0,0(S3)                    ; Store 1000 as the timer limit
LW      S3,TCtrlAddr(Zero)          ; Load timer control address

DisplayMode:
SW      FP,0(SP)                    ; Store frame pointer
ADDI    SP,SP,12                    ; Allocate memory for RA and RV
ADD     A0,S0,Zero                  ; Arg 1: seconds
ADD     A1,S1,Zero                  ; Arg 2: minutes
ADD     A2,S2,Zero                  ; Arg 3: hours
CALL    DisplayClock(Zero)          ; Display clock value

DisplayLoop:
LW      T0,KCTRL(Zero)              ; Load current key control bits
BNE     T0,Zero,KeyDown             ; Go to KeyPressHandler if key is pressed
LW		T0,0(S3)                    ; Load current timer control bits
BEQ		T0,Zero,DisplayLoop         ; Loop unless a second has passed

SW      FP,0(SP)                    ; Store frame pointer
ADDI    SP,SP,12                    ; Allocate memory for RA and RV
CALL    IncAndDisplay(Zero)         ; Tick clock

SW      Zero,0(S3)                  ; Clear ready bit
BR      DisplayLoop                 ; Loop forever

; Handles transition into set mode
;
; S4 is initial timer value
; S5 is seconds elapsed while a key is held down
; S6 is 1 if the timer has not ticked while the current second is being timed and
; 0 if it has
KeyDown:
LW      S4,TCNT(Zero)               ; Store initial timer value
XOR     S5,S5,S5                    ; Zero out the seconds elapsed count
ADDI    S6,Zero,1                   ; Set has not ticked to 1

KeyDownLoop:
LW      T0,KEY(Zero)                ; Load key value
ANDI    T0,T0,1                     ; Get 0th bit from key value
ADDI    T1,Zero,1                   ; Store a 1 for comparison
BNE     T0,T1,KeyDownExit           ; Exit if key 0 is not down
LW      T0,0(S3)                    ; Load timer control value
BNE     T0,Zero,KeyDownTick         ; Go to KeyDownTick if tick detected

KeyDownTime:
LW      T0,TCNT(Zero)               ; Load current timer count
SUB     T1,T0,S4                    ; Set T1 to difference of timer count and inital timer value
OR      T1,T1,S6                    ; T1 is zero if timer count is initial value and the timer has ticked
BEQ     T1,Zero,KeyDownElapse       ; Go to KeyDownElapse if one second has passed
BR      KeyDownLoop                 ; Loop if any keys are still down

KeyDownTick:
SW      FP,0(SP)                    ; Store frame pointer
ADDI    SP,SP,12                    ; Allocate memory for RA and RV
CALL    IncAndDisplay(Zero)         ; Tick clock

SW      Zero,0(S3)                  ; Set ready bit to 0
XOR     S6,S6,S6                    ; Set has not ticked to 0
BR      KeyDownTime                 ; Continue with transition period

KeyDownElapse:
ADDI    S5,S5,1                     ; Increment elapsed count
ADDI    S6,Zero,1                   ; Set has not ticked to 1
ADDI    T0,Zero,2                   ; Load 2 into T0
BEQ     S5,T0,SetMode               ; Switch to set mode if 2 seconds have elapsed
BR      KeyDownLoop                 ; Otherwise, loop

KeyDownExit:
BR      DisplayMode

; When clock is in set mode
;
; S4 is initial timer value
; S5 is seconds elapsed while no key is held down
; S6 is 1 if the timer has not ticked while the current second is being timed and
; 0 if it has
; S7 is previous key value
; S8 is current key value
; S9 is changed keys
SetMode:
LW      S4,TCNT(Zero)               ; Store initial timer value
XOR     S5,S5,S5                    ; Zero out the seconds elapsed count
ADDI    S6,Zero,1                   ; Set has not ticked to 1
LW      S7,KEY(Zero)                ; Set previous value to current key value
ADD     S8,S7,Zero                  ; Set current key equal to previous key
ADDI    T0,Zero,4                   ; Load 4
JAL     T0,SetModeLoop(T0)          ; Jump past first instruction of SetModeLoop

SetModeInit:
LW      S4,TCNT(Zero)               ; Store initial timer value
XOR     S5,S5,S5                    ; Zero out the seconds elapsed count
ADDI    S6,Zero,1                   ; Set has not ticked to 1

SetModeLoop:
LW      S8,KEY(Zero)                ; Load current key value
NOT     S9,S7                       ; Inverse previous value
AND     S9,S9,S8                    ; Compute keys that were just pressed

SW      FP,0(SP)                    ; Store frame pointer
ADDI    SP,SP,12                    ; Allocate memory for RA and RV
ADD     A0,S9,Zero                  ; Arg 1: keys just pressed
CALL    SetKey(Zero)                ; Handle key presses

ADD     S7,S8,Zero                  ; Save previous key value
LW      T0,0(S3)                    ; Load timer control address
BNE     T0,Zero,SetModeTick         ; Go to SetModeTick if a tick is detected

SetModeTime:
BNE     S9,Zero,SetModeInit         ; Reinit values if there were keys pressed
LW      T0,TCNT(Zero)               ; Load timer count
SUB     T1,T0,S4                    ; Compare to initial timer value
OR      T1,T1,S6                    ; Make sure there has been a tick
BEQ     T1,Zero,SetModeElapse       ; Go to SetModeElapse if a second has passed without key presses
BR      SetModeLoop                 ; Loop

SetModeTick:
SW      FP,0(SP)                    ; Store frame pointer
ADDI    SP,SP,12                    ; Allocate memory for RA and RV
CALL    IncAndDisplay(Zero)         ; Tick clock

SW      Zero,0(S3)                  ; Set ready bit to 0
XOR     S6,S6,S6                    ; Set has not ticked to 0
BR      SetModeTime                 ; Loop

SetModeElapse:
ADDI    S5,S5,1                     ; Increment elapsed count
ADDI    S6,Zero,1                   ; Set has not ticked to 1
ADDI    T0,Zero,5                   ; Load 5 into T0
BEQ     S5,T0,DisplayMode           ; Switch to display mode if 5 seconds have elapsed
BR      SetModeLoop                 ; Otherwise, loop

; Increments clock based on key values
;
; A0 is previous key value
; A1 is current key value
SetKey:
SW      RA,4(FP)                    ; Store return address
ADDI    SP,SP,8                     ; Push stack
SW      A0,-8(SP)                   ; Store arg 1
SW      S3,-4(SP)                   ; Store S3

ADD     S3,A0,Zero                  ; Load arg
BEQ     S3,Zero,SetKeyRet           ; Return if no keys are to be pressed

SetKeyDecMin:
ANDI    T0,S3,1                     ; Get 0th bit
BEQ     T0,Zero,SetKeyIncMin        ; Check next key if not pressed

SetKeyIncMin:
ANDI    T0,S3,2                     ; Get 1st bit
BEQ     T0,Zero,SetKeyDecHour       ; Check next key if not pressed

SW      FP,0(SP)                    ; Store frame pointer
ADD     FP,SP,Zero                  ; Point frame pointer to new record
ADDI    SP,SP,12                    ; Allocate memory for RA and RV
CALL    IncMin(Zero)                ; Increment minutes

SetKeyDecHour:
ANDI    T0,S3,4                     ; Get 2nd bit
BEQ     T0,Zero,SetKeyIncHour       ; Check next key if not pressed

SetKeyIncHour:
ANDI    T0,S3,8                     ; Get 3rd bit
BNE     T0,Zero,SetKeyRet           ; Return if not pressed

ADDI    T0,Zero,4                   ; Store 4 in T0
SW      FP,0(SP)                    ; Store frame pointer
ADD     FP,SP,Zero                  ; Point frame pointer to new record
ADDI    SP,SP,12                    ; Allocate memory for RA and RV
CALL    IncHour(T0)                 ; Increment hour but don't execute the first line

SetKeyRet:
LW      S3,-4(SP)                   ; Restore S3
LW      RA,4(FP)                    ; Load return address
ADD     SP,FP,Zero                  ; Pop stack
LW      FP,0(FP)                    ; Restore old frame pointer
RET


; Increments clock and displays the incremented value on the HEX pins
IncAndDisplay:
SW      RA,4(FP)                    ; Store return address

SW      FP,0(SP)                    ; Store frame pointer
ADD     FP,SP,Zero                  ; Set frame pointer to new record
ADDI    SP,SP,12                    ; Allocate memory for RA and RV
CALL    IncClock(Zero)              ; Increment clock every second

SW      FP,0(SP)                    ; Store frame pointer
ADD     FP,SP,Zero                  ; Set frame pointer to new record
ADDI    SP,SP,12                    ; Allocate memory for RA and RV
ADD     A0,S0,Zero                  ; Arg 1: seconds
ADD     A1,S1,Zero                  ; Arg 2: minutes
ADD     A2,S2,Zero                  ; Arg 3: hours
CALL    DisplayClock(Zero)          ; Display clock value

IncAndDisplayRet:
LW      RA,4(FP)                    ; Load return address
ADD     SP,FP,Zero                  ; Pop stack
LW      FP,0(FP)                    ; Restore old frame pointer
RET

; Displays the current time on the HEX pins
;
; A0 is seconds
; A1 is minutes
; A2 is hours
; S0 is clock value
; T0 is seconds
; T1 is shifted minutes
DisplayClock:
ADDI    SP,SP,16                    ; Push stack
SW      RA,4(FP)                    ; Store return address
SW      A0,-16(SP)                  ; Store arg 1
SW      A1,-12(SP)                  ; Store arg 2
SW      A2,-8(SP)                   ; Store arg 3
SW      S0,-4(SP)                   ; Save S0

ADD     A0,A1,Zero                  ; Arg 1: minutes
SW      FP,0(SP)                    ; Store frame pointer
ADD     FP,SP,Zero                  ; Set frame pointer to new record
ADDI    SP,SP,12                    ; Allocate memory for RA and RV
CALL    ByteShift(Zero)             ; Left shift 8 bits
ADD     T1,RV,Zero                  ; Grab return value

LW      T0,-16(SP)                  ; Get seconds from stack
XOR     S0,S0,S0                    ; Set clock value to 0
OR      S0,T0,T1                    ; Clock value holds seconds and minutes

LW      A0,-8(SP)                   ; Arg 1: hours
SW      FP,0(SP)                    ; Store frame pointer
ADD     FP,SP,Zero                  ; Set frame pointer to new record
ADDI    SP,SP,12                    ; Allocate memory for RA and RV
CALL    ByteShift(Zero)             ; Left shift 8 bits

ADD     A0,RV,Zero                  ; Grab return value and put into arg 1
SW      FP,0(SP)                    ; Store frame pointer
ADD     FP,SP,Zero                  ; Set frame pointer to new record
ADDI    SP,SP,12                    ; Allocate memory for RA and RV
CALL    ByteShift(Zero)             ; Left shift 8 bits

OR      S0,S0,RV                    ; Clock value holds seconds, minutes, and hours
SW      S0,HEX(Zero)                ; Display the clock value on the HEX pins

DisplayClockRet:
LW      S0,-4(SP)                   ; Restore S0
LW      RA,4(FP)                    ; Load return address
ADD     SP,FP,Zero                  ; Pop stack
LW      FP,0(FP)                    ; Restore old frame pointer
RET

; Shifts a value up one byte
;
; A0 is value to shift
; T0 is loop counter
ByteShift:
SW      RA,4(FP)                    ; Store return address
ADDI    SP,SP,4                     ; Push stack
SW      A0,-4(SP)                   ; Store arg 1

ADDI    T0,Zero,8                   ; Set loop counter to 8

ByteShiftLoop:
ADD     A0,A0,A0                    ; Left shift 1 bit
SUBI    T0,T0,1                     ; Decrement loop counter
BNE     T0,Zero,ByteShiftLoop       ; Loop 8 times

ByteShiftRet:
LW      RA,4(FP)                    ; Load return address
ADD     SP,FP,Zero                  ; Pop stack
ADD     RV,A0,Zero                  ; Return shifted value
LW      FP,0(FP)                    ; Restore old frame pointer
RET

; Increments clock value
;
; S0 is seconds
; S1 is minutes
; S2 is hours
; T0 is overflow value
; T1 is current digit
IncClock:
SW      RA,4(FP)                    ; Store return address

ADDI    T0,Zero,0x59                ; Set overflow value to 59
BEQ     T0,S0,IncMin                ; Go to IncMin if there are 59 seconds
ADDI    T0,Zero,0x9                 ; Set overflow value to 9
ADD     T1,Zero,S0                  ; Set current digit to seconds
ANDI    T1,T1,0xF                   ; Mask to get least significant digit
BEQ     T0,T1,SecOverflow           ; Go to SecOverflow if the least significant digit is 9
ADDI    S0,S0,1                     ; Otherwise, increment seconds
BR      IncClockRet

SecOverflow:
ADDI    S0,S0,0x10                  ; Add 10 seconds
ANDI    S0,S0,0xF0                  ; Set least significant digit to 0
BR      IncClockRet

IncMin:
XOR     S0,S0,S0                    ; Clear seconds
ADDI    T0,Zero,0x59                ; Set overflow value to 59
BEQ     T0,S1,IncHour               ; Go to IncHour if there are 59 minutes
ADDI    T0,Zero,0x9                 ; Set overflow value to 9
ADD     T1,Zero,S1                  ; Set current digit to minutes
ANDI    T1,T1,0xF                   ; Mask to get least significant digit
BEQ     T0,T1,MinOverflow           ; Go to MinOverflow if the least significant digit is 9
ADDI    S1,S1,1                     ; Otherwise, increment minutes
BR      IncClockRet

MinOverflow:
ADDI    S1,S1,0x10                  ; Add 10 minutes
ANDI    S1,S1,0xF0                  ; Set least significant digit to 0
BR      IncClockRet

IncHour:
XOR     S1,S1,S1                    ; Clear minutes
ADDI    T0,Zero,0x23                ; Set overflow value to 23
BEQ     T0,S2,Rollover              ; Go to Rollover if there are 23 hours
ADDI    T0,Zero,0x9                 ; Set overflow value to 9
ADD     T1,Zero,S2                  ; Set current digit to hours
ANDI    T1,T1,0xF                   ; Mask to get least significant digit
BEQ     T0,T1,HourOverflow          ; Go to HourOverflow if the least significant digit is 9
ADDI    S2,S2,1                     ; Otherwise, increment hours
BR      IncClockRet

HourOverflow:
ADDI    S2,S2,0x10                  ; Add 10 hours
ANDI    S2,S2,0xF0                  ; Set least significant digit to 0
BR      IncClockRet

Rollover:
XOR     S2,S2,S2                    ; Clear hours
BR      IncClockRet

IncClockRet:
LW      RA,4(FP)                    ; Load return address
ADD     SP,FP,Zero                  ; Pop stack
LW      FP,0(FP)                    ; Restore old frame pointer
RET

; Static data
TLimAddr:
.WORD TLIM
TCtrlAddr:
.WORD TCTRL
StackAddr:
.WORD STACK
TestVal:
.WORD TESTVAL
